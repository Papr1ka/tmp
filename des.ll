; ModuleID = 'des.c'
source_filename = "des.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-redhat-linux-gnu"

@sbox1 = internal unnamed_addr constant [64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", align 16
@sbox2 = internal unnamed_addr constant [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", align 16
@sbox3 = internal unnamed_addr constant [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", align 16
@sbox4 = internal unnamed_addr constant [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", align 16
@sbox5 = internal unnamed_addr constant [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", align 16
@sbox6 = internal unnamed_addr constant [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", align 16
@sbox7 = internal unnamed_addr constant [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", align 16
@sbox8 = internal unnamed_addr constant [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B", align 16
@__const.des_key_setup.key_rnd_shift = private unnamed_addr constant [16 x i32] [i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1], align 16
@__const.des_key_setup.key_perm_c = private unnamed_addr constant [28 x i32] [i32 56, i32 48, i32 40, i32 32, i32 24, i32 16, i32 8, i32 0, i32 57, i32 49, i32 41, i32 33, i32 25, i32 17, i32 9, i32 1, i32 58, i32 50, i32 42, i32 34, i32 26, i32 18, i32 10, i32 2, i32 59, i32 51, i32 43, i32 35], align 16
@__const.des_key_setup.key_perm_d = private unnamed_addr constant [28 x i32] [i32 62, i32 54, i32 46, i32 38, i32 30, i32 22, i32 14, i32 6, i32 61, i32 53, i32 45, i32 37, i32 29, i32 21, i32 13, i32 5, i32 60, i32 52, i32 44, i32 36, i32 28, i32 20, i32 12, i32 4, i32 27, i32 19, i32 11, i32 3], align 16
@__const.des_key_setup.key_compression = private unnamed_addr constant [48 x i32] [i32 13, i32 16, i32 10, i32 23, i32 0, i32 4, i32 2, i32 27, i32 14, i32 5, i32 20, i32 9, i32 22, i32 18, i32 11, i32 3, i32 25, i32 7, i32 15, i32 6, i32 26, i32 19, i32 12, i32 1, i32 40, i32 51, i32 30, i32 36, i32 46, i32 54, i32 29, i32 39, i32 50, i32 44, i32 32, i32 47, i32 43, i32 48, i32 38, i32 55, i32 33, i32 52, i32 45, i32 41, i32 49, i32 35, i32 28, i32 31], align 16

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @IP(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds i8, ptr %1, i64 7
  %4 = load i8, ptr %3, align 1, !tbaa !3
  %5 = zext i8 %4 to i32
  %6 = shl i32 %5, 25
  %7 = and i32 %6, -2147483648
  %8 = getelementptr inbounds i8, ptr %1, i64 6
  %9 = load i8, ptr %8, align 1, !tbaa !3
  %10 = zext i8 %9 to i32
  %11 = shl nuw i32 %10, 24
  %12 = and i32 %11, 1073741824
  %13 = getelementptr inbounds i8, ptr %1, i64 5
  %14 = load i8, ptr %13, align 1, !tbaa !3
  %15 = zext i8 %14 to i32
  %16 = shl nuw nsw i32 %15, 23
  %17 = and i32 %16, 536870912
  %18 = getelementptr inbounds i8, ptr %1, i64 4
  %19 = load i8, ptr %18, align 1, !tbaa !3
  %20 = zext i8 %19 to i32
  %21 = shl nuw nsw i32 %20, 22
  %22 = and i32 %21, 268435456
  %23 = getelementptr inbounds i8, ptr %1, i64 3
  %24 = load i8, ptr %23, align 1, !tbaa !3
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %25, 21
  %27 = and i32 %26, 134217728
  %28 = getelementptr inbounds i8, ptr %1, i64 2
  %29 = load i8, ptr %28, align 1, !tbaa !3
  %30 = zext i8 %29 to i32
  %31 = shl nuw nsw i32 %30, 20
  %32 = and i32 %31, 67108864
  %33 = getelementptr inbounds i8, ptr %1, i64 1
  %34 = load i8, ptr %33, align 1, !tbaa !3
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 19
  %37 = and i32 %36, 33554432
  %38 = load i8, ptr %1, align 1, !tbaa !3
  %39 = zext i8 %38 to i32
  %40 = shl nuw nsw i32 %39, 18
  %41 = and i32 %40, 16777216
  %42 = shl nuw nsw i32 %5, 19
  %43 = and i32 %42, 8388608
  %44 = shl nuw nsw i32 %10, 18
  %45 = and i32 %44, 4194304
  %46 = shl nuw nsw i32 %15, 17
  %47 = and i32 %46, 2097152
  %48 = shl nuw nsw i32 %20, 16
  %49 = and i32 %48, 1048576
  %50 = shl nuw nsw i32 %25, 15
  %51 = and i32 %50, 524288
  %52 = shl nuw nsw i32 %30, 14
  %53 = and i32 %52, 262144
  %54 = shl nuw nsw i32 %35, 13
  %55 = and i32 %54, 131072
  %56 = shl nuw nsw i32 %39, 12
  %57 = and i32 %56, 65536
  %58 = shl nuw nsw i32 %5, 13
  %59 = and i32 %58, 32768
  %60 = shl nuw nsw i32 %10, 12
  %61 = and i32 %60, 16384
  %62 = shl nuw nsw i32 %15, 11
  %63 = and i32 %62, 8192
  %64 = shl nuw nsw i32 %20, 10
  %65 = and i32 %64, 4096
  %66 = shl nuw nsw i32 %25, 9
  %67 = and i32 %66, 2048
  %68 = shl nuw nsw i32 %30, 8
  %69 = and i32 %68, 1024
  %70 = shl nuw nsw i32 %35, 7
  %71 = and i32 %70, 512
  %72 = shl nuw nsw i32 %39, 6
  %73 = and i32 %72, 256
  %74 = shl nuw nsw i32 %5, 7
  %75 = and i32 %74, 128
  %76 = shl nuw nsw i32 %10, 6
  %77 = and i32 %76, 64
  %78 = shl nuw nsw i32 %15, 5
  %79 = and i32 %78, 32
  %80 = shl nuw nsw i32 %20, 4
  %81 = and i32 %80, 16
  %82 = shl nuw nsw i32 %25, 3
  %83 = and i32 %82, 8
  %84 = shl nuw nsw i32 %30, 2
  %85 = and i32 %84, 4
  %86 = shl nuw nsw i32 %35, 1
  %87 = and i32 %86, 2
  %88 = and i32 %39, 1
  %89 = or i32 %43, %7
  %90 = or i32 %89, %59
  %91 = or i32 %90, %75
  %92 = or i32 %91, %12
  %93 = or i32 %92, %45
  %94 = or i32 %93, %61
  %95 = or i32 %94, %77
  %96 = or i32 %95, %17
  %97 = or i32 %96, %47
  %98 = or i32 %97, %63
  %99 = or i32 %98, %79
  %100 = or i32 %99, %22
  %101 = or i32 %100, %49
  %102 = or i32 %101, %65
  %103 = or i32 %102, %81
  %104 = or i32 %103, %27
  %105 = or i32 %104, %51
  %106 = or i32 %105, %67
  %107 = or i32 %106, %83
  %108 = or i32 %107, %32
  %109 = or i32 %108, %53
  %110 = or i32 %109, %69
  %111 = or i32 %110, %85
  %112 = or i32 %111, %37
  %113 = or i32 %112, %55
  %114 = or i32 %113, %71
  %115 = or i32 %114, %87
  %116 = or i32 %115, %88
  %117 = or i32 %116, %41
  %118 = or i32 %117, %57
  %119 = or i32 %118, %73
  store i32 %119, ptr %0, align 4, !tbaa !6
  %120 = load i8, ptr %3, align 1, !tbaa !3
  %121 = zext i8 %120 to i32
  %122 = sext i8 %120 to i32
  %123 = and i32 %122, -2147483648
  %124 = load i8, ptr %8, align 1, !tbaa !3
  %125 = zext i8 %124 to i32
  %126 = shl nuw nsw i32 %125, 23
  %127 = and i32 %126, 1073741824
  %128 = load i8, ptr %13, align 1, !tbaa !3
  %129 = zext i8 %128 to i32
  %130 = shl nuw nsw i32 %129, 22
  %131 = and i32 %130, 536870912
  %132 = load i8, ptr %18, align 1, !tbaa !3
  %133 = zext i8 %132 to i32
  %134 = shl nuw nsw i32 %133, 21
  %135 = and i32 %134, 268435456
  %136 = load i8, ptr %23, align 1, !tbaa !3
  %137 = zext i8 %136 to i32
  %138 = shl nuw nsw i32 %137, 20
  %139 = and i32 %138, 134217728
  %140 = load i8, ptr %28, align 1, !tbaa !3
  %141 = zext i8 %140 to i32
  %142 = shl nuw nsw i32 %141, 19
  %143 = and i32 %142, 67108864
  %144 = load i8, ptr %33, align 1, !tbaa !3
  %145 = zext i8 %144 to i32
  %146 = shl nuw nsw i32 %145, 18
  %147 = and i32 %146, 33554432
  %148 = load i8, ptr %1, align 1, !tbaa !3
  %149 = zext i8 %148 to i32
  %150 = shl nuw nsw i32 %149, 17
  %151 = and i32 %150, 16777216
  %152 = shl nuw nsw i32 %121, 18
  %153 = and i32 %152, 8388608
  %154 = shl nuw nsw i32 %125, 17
  %155 = and i32 %154, 4194304
  %156 = shl nuw nsw i32 %129, 16
  %157 = and i32 %156, 2097152
  %158 = shl nuw nsw i32 %133, 15
  %159 = and i32 %158, 1048576
  %160 = shl nuw nsw i32 %137, 14
  %161 = and i32 %160, 524288
  %162 = shl nuw nsw i32 %141, 13
  %163 = and i32 %162, 262144
  %164 = shl nuw nsw i32 %145, 12
  %165 = and i32 %164, 131072
  %166 = shl nuw nsw i32 %149, 11
  %167 = and i32 %166, 65536
  %168 = shl nuw nsw i32 %121, 12
  %169 = and i32 %168, 32768
  %170 = shl nuw nsw i32 %125, 11
  %171 = and i32 %170, 16384
  %172 = shl nuw nsw i32 %129, 10
  %173 = and i32 %172, 8192
  %174 = shl nuw nsw i32 %133, 9
  %175 = and i32 %174, 4096
  %176 = shl nuw nsw i32 %137, 8
  %177 = and i32 %176, 2048
  %178 = shl nuw nsw i32 %141, 7
  %179 = and i32 %178, 1024
  %180 = shl nuw nsw i32 %145, 6
  %181 = and i32 %180, 512
  %182 = shl nuw nsw i32 %149, 5
  %183 = and i32 %182, 256
  %184 = shl nuw nsw i32 %121, 6
  %185 = and i32 %184, 128
  %186 = shl nuw nsw i32 %125, 5
  %187 = and i32 %186, 64
  %188 = shl nuw nsw i32 %129, 4
  %189 = and i32 %188, 32
  %190 = shl nuw nsw i32 %133, 3
  %191 = and i32 %190, 16
  %192 = shl nuw nsw i32 %137, 2
  %193 = and i32 %192, 8
  %194 = shl nuw nsw i32 %141, 1
  %195 = and i32 %194, 4
  %196 = and i32 %145, 2
  %197 = lshr i32 %149, 1
  %198 = and i32 %197, 1
  %199 = or i32 %153, %123
  %200 = or i32 %199, %169
  %201 = or i32 %200, %185
  %202 = or i32 %201, %127
  %203 = or i32 %202, %155
  %204 = or i32 %203, %171
  %205 = or i32 %204, %187
  %206 = or i32 %205, %131
  %207 = or i32 %206, %157
  %208 = or i32 %207, %173
  %209 = or i32 %208, %189
  %210 = or i32 %209, %135
  %211 = or i32 %210, %159
  %212 = or i32 %211, %175
  %213 = or i32 %212, %191
  %214 = or i32 %213, %139
  %215 = or i32 %214, %161
  %216 = or i32 %215, %177
  %217 = or i32 %216, %193
  %218 = or i32 %217, %143
  %219 = or i32 %218, %163
  %220 = or i32 %219, %179
  %221 = or i32 %220, %195
  %222 = or i32 %221, %196
  %223 = or i32 %222, %147
  %224 = or i32 %223, %165
  %225 = or i32 %224, %181
  %226 = or i32 %225, %151
  %227 = or i32 %226, %167
  %228 = or i32 %227, %183
  %229 = or i32 %228, %198
  %230 = getelementptr inbounds i32, ptr %0, i64 1
  store i32 %229, ptr %230, align 4, !tbaa !6
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @InvIP(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds i32, ptr %0, i64 1
  %4 = load i32, ptr %3, align 4, !tbaa !6
  %5 = lshr i32 %4, 17
  %6 = and i32 %5, 128
  %7 = load i32, ptr %0, align 4, !tbaa !6
  %8 = lshr i32 %7, 18
  %9 = and i32 %8, 64
  %10 = lshr i32 %4, 11
  %11 = and i32 %10, 32
  %12 = lshr i32 %7, 12
  %13 = and i32 %12, 16
  %14 = lshr i32 %4, 5
  %15 = and i32 %14, 8
  %16 = lshr i32 %7, 6
  %17 = and i32 %16, 4
  %18 = shl i32 %4, 1
  %19 = and i32 %18, 2
  %20 = and i32 %7, 1
  %21 = or i32 %11, %6
  %22 = or i32 %21, %15
  %23 = or i32 %22, %19
  %24 = or i32 %23, %20
  %25 = or i32 %24, %9
  %26 = or i32 %25, %13
  %27 = or i32 %26, %17
  %28 = trunc i32 %27 to i8
  store i8 %28, ptr %1, align 1, !tbaa !3
  %29 = load i32, ptr %3, align 4, !tbaa !6
  %30 = lshr i32 %29, 18
  %31 = and i32 %30, 128
  %32 = load i32, ptr %0, align 4, !tbaa !6
  %33 = lshr i32 %32, 19
  %34 = and i32 %33, 64
  %35 = lshr i32 %29, 12
  %36 = and i32 %35, 32
  %37 = lshr i32 %32, 13
  %38 = and i32 %37, 16
  %39 = lshr i32 %29, 6
  %40 = and i32 %39, 8
  %41 = lshr i32 %32, 7
  %42 = and i32 %41, 4
  %43 = and i32 %29, 2
  %44 = lshr i32 %32, 1
  %45 = and i32 %44, 1
  %46 = or i32 %31, %43
  %47 = or i32 %46, %36
  %48 = or i32 %47, %40
  %49 = or i32 %48, %34
  %50 = or i32 %49, %38
  %51 = or i32 %50, %42
  %52 = or i32 %51, %45
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds i8, ptr %1, i64 1
  store i8 %53, ptr %54, align 1, !tbaa !3
  %55 = load i32, ptr %3, align 4, !tbaa !6
  %56 = lshr i32 %55, 19
  %57 = and i32 %56, 128
  %58 = load i32, ptr %0, align 4, !tbaa !6
  %59 = lshr i32 %58, 20
  %60 = and i32 %59, 64
  %61 = lshr i32 %55, 13
  %62 = and i32 %61, 32
  %63 = lshr i32 %58, 14
  %64 = and i32 %63, 16
  %65 = lshr i32 %55, 7
  %66 = and i32 %65, 8
  %67 = lshr i32 %58, 8
  %68 = and i32 %67, 4
  %69 = lshr i32 %55, 1
  %70 = and i32 %69, 2
  %71 = lshr i32 %58, 2
  %72 = and i32 %71, 1
  %73 = or i32 %62, %57
  %74 = or i32 %73, %66
  %75 = or i32 %74, %70
  %76 = or i32 %75, %60
  %77 = or i32 %76, %64
  %78 = or i32 %77, %68
  %79 = or i32 %78, %72
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, ptr %1, i64 2
  store i8 %80, ptr %81, align 1, !tbaa !3
  %82 = load i32, ptr %3, align 4, !tbaa !6
  %83 = lshr i32 %82, 20
  %84 = and i32 %83, 128
  %85 = load i32, ptr %0, align 4, !tbaa !6
  %86 = lshr i32 %85, 21
  %87 = and i32 %86, 64
  %88 = lshr i32 %82, 14
  %89 = and i32 %88, 32
  %90 = lshr i32 %85, 15
  %91 = and i32 %90, 16
  %92 = lshr i32 %82, 8
  %93 = and i32 %92, 8
  %94 = lshr i32 %85, 9
  %95 = and i32 %94, 4
  %96 = lshr i32 %82, 2
  %97 = and i32 %96, 2
  %98 = lshr i32 %85, 3
  %99 = and i32 %98, 1
  %100 = or i32 %89, %84
  %101 = or i32 %100, %93
  %102 = or i32 %101, %97
  %103 = or i32 %102, %87
  %104 = or i32 %103, %91
  %105 = or i32 %104, %95
  %106 = or i32 %105, %99
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds i8, ptr %1, i64 3
  store i8 %107, ptr %108, align 1, !tbaa !3
  %109 = load i32, ptr %3, align 4, !tbaa !6
  %110 = lshr i32 %109, 21
  %111 = and i32 %110, 128
  %112 = load i32, ptr %0, align 4, !tbaa !6
  %113 = lshr i32 %112, 22
  %114 = and i32 %113, 64
  %115 = lshr i32 %109, 15
  %116 = and i32 %115, 32
  %117 = lshr i32 %112, 16
  %118 = and i32 %117, 16
  %119 = lshr i32 %109, 9
  %120 = and i32 %119, 8
  %121 = lshr i32 %112, 10
  %122 = and i32 %121, 4
  %123 = lshr i32 %109, 3
  %124 = and i32 %123, 2
  %125 = lshr i32 %112, 4
  %126 = and i32 %125, 1
  %127 = or i32 %116, %111
  %128 = or i32 %127, %120
  %129 = or i32 %128, %124
  %130 = or i32 %129, %114
  %131 = or i32 %130, %118
  %132 = or i32 %131, %122
  %133 = or i32 %132, %126
  %134 = trunc i32 %133 to i8
  %135 = getelementptr inbounds i8, ptr %1, i64 4
  store i8 %134, ptr %135, align 1, !tbaa !3
  %136 = load i32, ptr %3, align 4, !tbaa !6
  %137 = lshr i32 %136, 22
  %138 = and i32 %137, 128
  %139 = load i32, ptr %0, align 4, !tbaa !6
  %140 = lshr i32 %139, 23
  %141 = and i32 %140, 64
  %142 = lshr i32 %136, 16
  %143 = and i32 %142, 32
  %144 = lshr i32 %139, 17
  %145 = and i32 %144, 16
  %146 = lshr i32 %136, 10
  %147 = and i32 %146, 8
  %148 = lshr i32 %139, 11
  %149 = and i32 %148, 4
  %150 = lshr i32 %136, 4
  %151 = and i32 %150, 2
  %152 = lshr i32 %139, 5
  %153 = and i32 %152, 1
  %154 = or i32 %143, %138
  %155 = or i32 %154, %147
  %156 = or i32 %155, %151
  %157 = or i32 %156, %141
  %158 = or i32 %157, %145
  %159 = or i32 %158, %149
  %160 = or i32 %159, %153
  %161 = trunc i32 %160 to i8
  %162 = getelementptr inbounds i8, ptr %1, i64 5
  store i8 %161, ptr %162, align 1, !tbaa !3
  %163 = load i32, ptr %3, align 4, !tbaa !6
  %164 = lshr i32 %163, 23
  %165 = and i32 %164, 128
  %166 = load i32, ptr %0, align 4, !tbaa !6
  %167 = lshr i32 %166, 24
  %168 = and i32 %167, 64
  %169 = lshr i32 %163, 17
  %170 = and i32 %169, 32
  %171 = lshr i32 %166, 18
  %172 = and i32 %171, 16
  %173 = lshr i32 %163, 11
  %174 = and i32 %173, 8
  %175 = lshr i32 %166, 12
  %176 = and i32 %175, 4
  %177 = lshr i32 %163, 5
  %178 = and i32 %177, 2
  %179 = lshr i32 %166, 6
  %180 = and i32 %179, 1
  %181 = or i32 %170, %165
  %182 = or i32 %181, %174
  %183 = or i32 %182, %178
  %184 = or i32 %183, %168
  %185 = or i32 %184, %172
  %186 = or i32 %185, %176
  %187 = or i32 %186, %180
  %188 = trunc i32 %187 to i8
  %189 = getelementptr inbounds i8, ptr %1, i64 6
  store i8 %188, ptr %189, align 1, !tbaa !3
  %190 = load i32, ptr %3, align 4, !tbaa !6
  %191 = lshr i32 %190, 24
  %192 = and i32 %191, 128
  %193 = load i32, ptr %0, align 4, !tbaa !6
  %194 = lshr i32 %193, 25
  %195 = and i32 %194, 64
  %196 = lshr i32 %190, 18
  %197 = and i32 %196, 32
  %198 = lshr i32 %193, 19
  %199 = and i32 %198, 16
  %200 = lshr i32 %190, 12
  %201 = and i32 %200, 8
  %202 = lshr i32 %193, 13
  %203 = and i32 %202, 4
  %204 = lshr i32 %190, 6
  %205 = and i32 %204, 2
  %206 = lshr i32 %193, 7
  %207 = and i32 %206, 1
  %208 = or i32 %197, %192
  %209 = or i32 %208, %201
  %210 = or i32 %209, %205
  %211 = or i32 %210, %195
  %212 = or i32 %211, %199
  %213 = or i32 %212, %203
  %214 = or i32 %213, %207
  %215 = trunc i32 %214 to i8
  %216 = getelementptr inbounds i8, ptr %1, i64 7
  store i8 %215, ptr %216, align 1, !tbaa !3
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) uwtable
define dso_local i32 @f(i32 noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #1 {
  %3 = shl i32 %0, 31
  %4 = lshr i32 %0, 1
  %5 = and i32 %4, 2080374784
  %6 = or i32 %5, %3
  %7 = lshr i32 %0, 3
  %8 = and i32 %7, 65011712
  %9 = or i32 %6, %8
  %10 = and i32 %7, 1048576
  %11 = lshr i32 %0, 5
  %12 = and i32 %11, 1015808
  %13 = or i32 %10, %12
  %14 = or i32 %13, %9
  %15 = and i32 %11, 16384
  %16 = lshr i32 %0, 7
  %17 = and i32 %16, 16128
  %18 = or i32 %15, %17
  %19 = or i32 %18, %14
  %20 = shl i32 %0, 15
  %21 = and i32 %20, -67108864
  %22 = shl i32 %0, 13
  %23 = and i32 %22, 65011712
  %24 = or i32 %21, %23
  %25 = and i32 %22, 1048576
  %26 = shl i32 %0, 11
  %27 = and i32 %26, 1015808
  %28 = or i32 %25, %27
  %29 = or i32 %28, %24
  %30 = and i32 %26, 16384
  %31 = shl i32 %0, 9
  %32 = and i32 %31, 15872
  %33 = or i32 %30, %32
  %34 = or i32 %33, %29
  %35 = lshr i32 %9, 24
  %36 = lshr i32 %14, 16
  %37 = lshr exact i32 %19, 8
  %38 = lshr i32 %24, 24
  %39 = lshr i32 %29, 16
  %40 = lshr i32 %0, 31
  %41 = lshr exact i32 %34, 8
  %42 = load i8, ptr %1, align 1, !tbaa !3
  %43 = trunc i32 %35 to i8
  %44 = xor i8 %42, %43
  %45 = getelementptr inbounds i8, ptr %1, i64 1
  %46 = load i8, ptr %45, align 1, !tbaa !3
  %47 = trunc i32 %36 to i8
  %48 = xor i8 %46, %47
  %49 = getelementptr inbounds i8, ptr %1, i64 2
  %50 = load i8, ptr %49, align 1, !tbaa !3
  %51 = trunc i32 %37 to i8
  %52 = xor i8 %50, %51
  %53 = getelementptr inbounds i8, ptr %1, i64 3
  %54 = load i8, ptr %53, align 1, !tbaa !3
  %55 = trunc i32 %38 to i8
  %56 = xor i8 %54, %55
  %57 = getelementptr inbounds i8, ptr %1, i64 4
  %58 = load i8, ptr %57, align 1, !tbaa !3
  %59 = trunc i32 %39 to i8
  %60 = xor i8 %58, %59
  %61 = getelementptr inbounds i8, ptr %1, i64 5
  %62 = load i8, ptr %61, align 1, !tbaa !3
  %63 = or i32 %41, %40
  %64 = trunc i32 %63 to i8
  %65 = xor i8 %62, %64
  %66 = zext i8 %44 to i32
  %67 = lshr i32 %66, 2
  %68 = and i32 %67, 32
  %69 = lshr i32 %66, 3
  %70 = and i32 %69, 15
  %71 = or i32 %68, %70
  %72 = shl nuw nsw i32 %67, 4
  %73 = and i32 %72, 16
  %74 = or i32 %71, %73
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds [64 x i8], ptr @sbox1, i64 0, i64 %75
  %77 = load i8, ptr %76, align 1, !tbaa !3
  %78 = zext i8 %77 to i32
  %79 = shl i32 %78, 28
  %80 = shl nuw nsw i32 %66, 4
  %81 = zext i8 %48 to i32
  %82 = and i32 %80, 32
  %83 = lshr i32 %81, 5
  %84 = shl nuw nsw i32 %66, 3
  %85 = and i32 %84, 8
  %86 = or i32 %83, %85
  %87 = or i32 %86, %82
  %88 = and i32 %81, 16
  %89 = or i32 %87, %88
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [64 x i8], ptr @sbox2, i64 0, i64 %90
  %92 = load i8, ptr %91, align 1, !tbaa !3
  %93 = zext i8 %92 to i32
  %94 = shl nuw i32 %93, 24
  %95 = or i32 %94, %79
  %96 = shl nuw nsw i32 %81, 2
  %97 = zext i8 %52 to i32
  %98 = lshr i32 %97, 6
  %99 = or i32 %98, %96
  %100 = and i32 %96, 32
  %101 = lshr i32 %99, 1
  %102 = and i32 %101, 15
  %103 = shl nuw nsw i32 %98, 4
  %104 = and i32 %103, 16
  %105 = or i32 %104, %100
  %106 = or i32 %105, %102
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds [64 x i8], ptr @sbox3, i64 0, i64 %107
  %109 = load i8, ptr %108, align 1, !tbaa !3
  %110 = zext i8 %109 to i32
  %111 = shl nuw nsw i32 %110, 20
  %112 = or i32 %95, %111
  %113 = and i32 %97, 32
  %114 = lshr i32 %97, 1
  %115 = and i32 %114, 15
  %116 = or i32 %115, %113
  %117 = shl nuw nsw i32 %97, 4
  %118 = and i32 %117, 16
  %119 = or i32 %116, %118
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [64 x i8], ptr @sbox4, i64 0, i64 %120
  %122 = load i8, ptr %121, align 1, !tbaa !3
  %123 = zext i8 %122 to i32
  %124 = shl nuw nsw i32 %123, 16
  %125 = or i32 %112, %124
  %126 = zext i8 %56 to i32
  %127 = lshr i32 %126, 2
  %128 = and i32 %127, 32
  %129 = lshr i32 %126, 3
  %130 = and i32 %129, 15
  %131 = or i32 %128, %130
  %132 = shl nuw nsw i32 %127, 4
  %133 = and i32 %132, 16
  %134 = or i32 %131, %133
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [64 x i8], ptr @sbox5, i64 0, i64 %135
  %137 = load i8, ptr %136, align 1, !tbaa !3
  %138 = zext i8 %137 to i32
  %139 = shl nuw nsw i32 %138, 12
  %140 = or i32 %125, %139
  %141 = shl nuw nsw i32 %126, 4
  %142 = zext i8 %60 to i32
  %143 = and i32 %141, 32
  %144 = lshr i32 %142, 5
  %145 = shl nuw nsw i32 %126, 3
  %146 = and i32 %145, 8
  %147 = or i32 %144, %146
  %148 = or i32 %147, %143
  %149 = and i32 %142, 16
  %150 = or i32 %148, %149
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds [64 x i8], ptr @sbox6, i64 0, i64 %151
  %153 = load i8, ptr %152, align 1, !tbaa !3
  %154 = zext i8 %153 to i32
  %155 = shl nuw nsw i32 %154, 8
  %156 = or i32 %140, %155
  %157 = shl nuw nsw i32 %142, 2
  %158 = zext i8 %65 to i32
  %159 = lshr i32 %158, 6
  %160 = or i32 %159, %157
  %161 = and i32 %157, 32
  %162 = lshr i32 %160, 1
  %163 = and i32 %162, 15
  %164 = shl nuw nsw i32 %159, 4
  %165 = and i32 %164, 16
  %166 = or i32 %165, %161
  %167 = or i32 %166, %163
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds [64 x i8], ptr @sbox7, i64 0, i64 %168
  %170 = load i8, ptr %169, align 1, !tbaa !3
  %171 = zext i8 %170 to i32
  %172 = shl nuw nsw i32 %171, 4
  %173 = or i32 %156, %172
  %174 = and i32 %158, 32
  %175 = lshr i32 %158, 1
  %176 = and i32 %175, 15
  %177 = or i32 %176, %174
  %178 = shl nuw nsw i32 %158, 4
  %179 = and i32 %178, 16
  %180 = or i32 %177, %179
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds [64 x i8], ptr @sbox8, i64 0, i64 %181
  %183 = load i8, ptr %182, align 1, !tbaa !3
  %184 = zext i8 %183 to i32
  %185 = or i32 %173, %184
  %186 = shl i32 %140, 15
  %187 = and i32 %186, -2147483648
  %188 = shl i32 %112, 5
  %189 = and i32 %188, 1073741824
  %190 = shl i32 %156, 17
  %191 = and i32 %190, 536870912
  %192 = shl i32 %173, 17
  %193 = and i32 %192, 268435456
  %194 = shl i32 %185, 24
  %195 = and i32 %194, 134217728
  %196 = shl i32 %125, 6
  %197 = and i32 %196, 67108864
  %198 = shl i32 %185, 21
  %199 = and i32 %198, 33554432
  %200 = shl i32 %156, 9
  %201 = and i32 %200, 16777216
  %202 = lshr exact i32 %95, 8
  %203 = and i32 %202, 8388608
  %204 = shl i32 %140, 5
  %205 = and i32 %204, 4194304
  %206 = shl i32 %173, 12
  %207 = and i32 %206, 2097152
  %208 = shl i32 %185, 14
  %209 = and i32 %208, 1048576
  %210 = lshr exact i32 %112, 8
  %211 = and i32 %210, 524288
  %212 = shl i32 %156, 4
  %213 = and i32 %212, 262144
  %214 = shl i32 %185, 16
  %215 = and i32 %214, 131072
  %216 = lshr exact i32 %125, 6
  %217 = and i32 %216, 65536
  %218 = lshr exact i32 %95, 15
  %219 = and i32 %218, 32768
  %220 = lshr exact i32 %112, 10
  %221 = and i32 %220, 16384
  %222 = shl i32 %173, 5
  %223 = and i32 %222, 8192
  %224 = lshr exact i32 %140, 6
  %225 = and i32 %224, 4096
  %226 = shl i32 %185, 11
  %227 = and i32 %226, 2048
  %228 = shl i32 %185, 5
  %229 = and i32 %228, 1024
  %230 = lshr exact i32 %95, 20
  %231 = and i32 %230, 512
  %232 = lshr exact i32 %125, 15
  %233 = and i32 %232, 256
  %234 = lshr exact i32 %156, 6
  %235 = and i32 %234, 128
  %236 = lshr i32 %140, 13
  %237 = and i32 %236, 64
  %238 = shl i32 %185, 3
  %239 = and i32 %238, 32
  %240 = lshr i32 %112, 22
  %241 = and i32 %240, 16
  %242 = lshr i32 %173, 7
  %243 = and i32 %242, 8
  %244 = lshr i32 %125, 19
  %245 = and i32 %244, 4
  %246 = lshr i32 %95, 27
  %247 = and i32 %246, 2
  %248 = lshr i32 %185, 7
  %249 = and i32 %248, 1
  %250 = or i32 %219, %203
  %251 = or i32 %250, %231
  %252 = or i32 %251, %247
  %253 = or i32 %252, %189
  %254 = or i32 %253, %211
  %255 = or i32 %254, %221
  %256 = or i32 %255, %241
  %257 = or i32 %256, %197
  %258 = or i32 %257, %217
  %259 = or i32 %258, %233
  %260 = or i32 %259, %245
  %261 = or i32 %260, %187
  %262 = or i32 %261, %205
  %263 = or i32 %262, %225
  %264 = or i32 %263, %237
  %265 = or i32 %264, %191
  %266 = or i32 %265, %201
  %267 = or i32 %266, %213
  %268 = or i32 %267, %235
  %269 = or i32 %268, %193
  %270 = or i32 %269, %207
  %271 = or i32 %270, %223
  %272 = or i32 %271, %243
  %273 = or i32 %272, %195
  %274 = or i32 %273, %199
  %275 = or i32 %274, %209
  %276 = or i32 %275, %215
  %277 = or i32 %276, %227
  %278 = or i32 %277, %229
  %279 = or i32 %278, %239
  %280 = or i32 %279, %249
  ret i32 %280
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable
define dso_local void @des_key_setup(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i64 [ 0, %3 ], [ %36, %4 ]
  %6 = phi i32 [ 0, %3 ], [ %35, %4 ]
  %7 = phi i32 [ 31, %3 ], [ %37, %4 ]
  %8 = getelementptr inbounds [28 x i32], ptr @__const.des_key_setup.key_perm_c, i64 0, i64 %5
  %9 = load i32, ptr %8, align 8, !tbaa !6
  %10 = lshr i32 %9, 3
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds i8, ptr %0, i64 %11
  %13 = load i8, ptr %12, align 1, !tbaa !3
  %14 = zext i8 %13 to i32
  %15 = and i32 %9, 7
  %16 = xor i32 %15, 7
  %17 = lshr i32 %14, %16
  %18 = and i32 %17, 1
  %19 = shl nuw i32 %18, %7
  %20 = or i32 %19, %6
  %21 = or i64 %5, 1
  %22 = add nsw i32 %7, -1
  %23 = getelementptr inbounds [28 x i32], ptr @__const.des_key_setup.key_perm_c, i64 0, i64 %21
  %24 = load i32, ptr %23, align 4, !tbaa !6
  %25 = lshr i32 %24, 3
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i8, ptr %0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !3
  %29 = zext i8 %28 to i32
  %30 = and i32 %24, 7
  %31 = xor i32 %30, 7
  %32 = lshr i32 %29, %31
  %33 = and i32 %32, 1
  %34 = shl nuw i32 %33, %22
  %35 = or i32 %34, %20
  %36 = add nuw nsw i64 %5, 2
  %37 = add nsw i32 %7, -2
  %38 = icmp eq i64 %36, 28
  br i1 %38, label %41, label %4, !llvm.loop !8

39:                                               ; preds = %41
  %40 = icmp eq i32 %2, 1
  br label %76

41:                                               ; preds = %4, %41
  %42 = phi i64 [ %73, %41 ], [ 0, %4 ]
  %43 = phi i32 [ %72, %41 ], [ 0, %4 ]
  %44 = phi i32 [ %74, %41 ], [ 31, %4 ]
  %45 = getelementptr inbounds [28 x i32], ptr @__const.des_key_setup.key_perm_d, i64 0, i64 %42
  %46 = load i32, ptr %45, align 8, !tbaa !6
  %47 = lshr i32 %46, 3
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, ptr %0, i64 %48
  %50 = load i8, ptr %49, align 1, !tbaa !3
  %51 = zext i8 %50 to i32
  %52 = and i32 %46, 7
  %53 = xor i32 %52, 7
  %54 = lshr i32 %51, %53
  %55 = and i32 %54, 1
  %56 = shl nuw i32 %55, %44
  %57 = or i32 %56, %43
  %58 = or i64 %42, 1
  %59 = add nsw i32 %44, -1
  %60 = getelementptr inbounds [28 x i32], ptr @__const.des_key_setup.key_perm_d, i64 0, i64 %58
  %61 = load i32, ptr %60, align 4, !tbaa !6
  %62 = lshr i32 %61, 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, ptr %0, i64 %63
  %65 = load i8, ptr %64, align 1, !tbaa !3
  %66 = zext i8 %65 to i32
  %67 = and i32 %61, 7
  %68 = xor i32 %67, 7
  %69 = lshr i32 %66, %68
  %70 = and i32 %69, 1
  %71 = shl nuw i32 %70, %59
  %72 = or i32 %71, %57
  %73 = add nuw nsw i64 %42, 2
  %74 = add nsw i32 %44, -2
  %75 = icmp eq i64 %73, 28
  br i1 %75, label %39, label %41, !llvm.loop !10

76:                                               ; preds = %39, %135
  %77 = phi i64 [ 0, %39 ], [ %136, %135 ]
  %78 = phi i32 [ %72, %39 ], [ %96, %135 ]
  %79 = phi i32 [ %35, %39 ], [ %94, %135 ]
  %80 = getelementptr inbounds [16 x i32], ptr @__const.des_key_setup.key_rnd_shift, i64 0, i64 %77
  %81 = load i32, ptr %80, align 4, !tbaa !6
  %82 = shl i32 %79, %81
  %83 = sub i32 28, %81
  %84 = lshr i32 %79, %83
  %85 = or i32 %84, %82
  %86 = shl i32 %78, %81
  %87 = lshr i32 %78, %83
  %88 = or i32 %87, %86
  %89 = sub nsw i64 15, %77
  %90 = select i1 %40, i64 %89, i64 %77
  %91 = and i64 %90, 4294967295
  %92 = mul nuw nsw i64 %91, 6
  %93 = getelementptr i8, ptr %1, i64 %92
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(6) %93, i8 0, i64 6, i1 false), !tbaa !3
  %94 = and i32 %85, -16
  br label %97

95:                                               ; preds = %97
  %96 = and i32 %88, -16
  br label %116

97:                                               ; preds = %76, %97
  %98 = phi i64 [ 0, %76 ], [ %114, %97 ]
  %99 = getelementptr inbounds [48 x i32], ptr @__const.des_key_setup.key_compression, i64 0, i64 %98
  %100 = load i32, ptr %99, align 4, !tbaa !6
  %101 = sub i32 31, %100
  %102 = lshr i32 %94, %101
  %103 = and i32 %102, 1
  %104 = trunc i64 %98 to i32
  %105 = and i32 %104, 7
  %106 = xor i32 %105, 7
  %107 = shl nuw nsw i32 %103, %106
  %108 = lshr i64 %98, 3
  %109 = and i64 %108, 536870911
  %110 = getelementptr inbounds [6 x i8], ptr %1, i64 %91, i64 %109
  %111 = load i8, ptr %110, align 1, !tbaa !3
  %112 = trunc i32 %107 to i8
  %113 = or i8 %111, %112
  store i8 %113, ptr %110, align 1, !tbaa !3
  %114 = add nuw nsw i64 %98, 1
  %115 = icmp eq i64 %114, 24
  br i1 %115, label %95, label %97, !llvm.loop !11

116:                                              ; preds = %95, %116
  %117 = phi i64 [ 24, %95 ], [ %133, %116 ]
  %118 = getelementptr inbounds [48 x i32], ptr @__const.des_key_setup.key_compression, i64 0, i64 %117
  %119 = load i32, ptr %118, align 4, !tbaa !6
  %120 = sub i32 59, %119
  %121 = lshr i32 %96, %120
  %122 = and i32 %121, 1
  %123 = trunc i64 %117 to i32
  %124 = and i32 %123, 7
  %125 = xor i32 %124, 7
  %126 = shl nuw nsw i32 %122, %125
  %127 = lshr i64 %117, 3
  %128 = and i64 %127, 536870911
  %129 = getelementptr inbounds [6 x i8], ptr %1, i64 %91, i64 %128
  %130 = load i8, ptr %129, align 1, !tbaa !3
  %131 = trunc i32 %126 to i8
  %132 = or i8 %130, %131
  store i8 %132, ptr %129, align 1, !tbaa !3
  %133 = add nuw nsw i64 %117, 1
  %134 = icmp eq i64 %133, 48
  br i1 %134, label %135, label %116, !llvm.loop !12

135:                                              ; preds = %116
  %136 = add nuw nsw i64 %77, 1
  %137 = icmp eq i64 %136, 16
  br i1 %137, label %138, label %76, !llvm.loop !13

138:                                              ; preds = %135
  ret void
}

; Function Attrs: nofree nosync nounwind memory(argmem: readwrite) uwtable
define dso_local void @des_crypt(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) local_unnamed_addr #4 {
  %4 = alloca [2 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #6
  call void @IP(ptr noundef nonnull %4, ptr noundef %0)
  %5 = getelementptr inbounds [2 x i32], ptr %4, i64 0, i64 1
  %6 = load i32, ptr %5, align 4, !tbaa !6
  %7 = load i32, ptr %4, align 4, !tbaa !6
  %8 = tail call i32 @f(i32 noundef %6, ptr noundef %2)
  %9 = xor i32 %7, %8
  %10 = getelementptr inbounds [6 x i8], ptr %2, i64 1
  %11 = tail call i32 @f(i32 noundef %9, ptr noundef nonnull %10)
  %12 = xor i32 %6, %11
  %13 = getelementptr inbounds [6 x i8], ptr %2, i64 2
  %14 = tail call i32 @f(i32 noundef %12, ptr noundef nonnull %13)
  %15 = xor i32 %9, %14
  %16 = getelementptr inbounds [6 x i8], ptr %2, i64 3
  %17 = tail call i32 @f(i32 noundef %15, ptr noundef nonnull %16)
  %18 = xor i32 %12, %17
  %19 = getelementptr inbounds [6 x i8], ptr %2, i64 4
  %20 = tail call i32 @f(i32 noundef %18, ptr noundef nonnull %19)
  %21 = xor i32 %15, %20
  %22 = getelementptr inbounds [6 x i8], ptr %2, i64 5
  %23 = tail call i32 @f(i32 noundef %21, ptr noundef nonnull %22)
  %24 = xor i32 %18, %23
  %25 = getelementptr inbounds [6 x i8], ptr %2, i64 6
  %26 = tail call i32 @f(i32 noundef %24, ptr noundef nonnull %25)
  %27 = xor i32 %21, %26
  %28 = getelementptr inbounds [6 x i8], ptr %2, i64 7
  %29 = tail call i32 @f(i32 noundef %27, ptr noundef nonnull %28)
  %30 = xor i32 %24, %29
  %31 = getelementptr inbounds [6 x i8], ptr %2, i64 8
  %32 = tail call i32 @f(i32 noundef %30, ptr noundef nonnull %31)
  %33 = xor i32 %27, %32
  %34 = getelementptr inbounds [6 x i8], ptr %2, i64 9
  %35 = tail call i32 @f(i32 noundef %33, ptr noundef nonnull %34)
  %36 = xor i32 %30, %35
  %37 = getelementptr inbounds [6 x i8], ptr %2, i64 10
  %38 = tail call i32 @f(i32 noundef %36, ptr noundef nonnull %37)
  %39 = xor i32 %33, %38
  %40 = getelementptr inbounds [6 x i8], ptr %2, i64 11
  %41 = tail call i32 @f(i32 noundef %39, ptr noundef nonnull %40)
  %42 = xor i32 %36, %41
  %43 = getelementptr inbounds [6 x i8], ptr %2, i64 12
  %44 = tail call i32 @f(i32 noundef %42, ptr noundef nonnull %43)
  %45 = xor i32 %39, %44
  %46 = getelementptr inbounds [6 x i8], ptr %2, i64 13
  %47 = tail call i32 @f(i32 noundef %45, ptr noundef nonnull %46)
  %48 = xor i32 %42, %47
  %49 = getelementptr inbounds [6 x i8], ptr %2, i64 14
  %50 = tail call i32 @f(i32 noundef %48, ptr noundef nonnull %49)
  %51 = xor i32 %45, %50
  store i32 %51, ptr %5, align 4, !tbaa !6
  %52 = getelementptr inbounds [6 x i8], ptr %2, i64 15
  %53 = tail call i32 @f(i32 noundef %51, ptr noundef nonnull %52)
  %54 = xor i32 %48, %53
  store i32 %54, ptr %4, align 4, !tbaa !6
  call void @InvIP(ptr noundef nonnull %4, ptr noundef %1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #6
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable
define dso_local void @three_des_key_setup(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = icmp eq i32 %2, 0
  %5 = getelementptr inbounds [16 x [6 x i8]], ptr %1, i64 2
  br i1 %4, label %6, label %10

6:                                                ; preds = %3
  tail call void @des_key_setup(ptr noundef %0, ptr noundef %1, i32 noundef 0)
  %7 = getelementptr inbounds i8, ptr %0, i64 8
  %8 = getelementptr inbounds [16 x [6 x i8]], ptr %1, i64 1
  tail call void @des_key_setup(ptr noundef nonnull %7, ptr noundef nonnull %8, i32 noundef 1)
  %9 = getelementptr inbounds i8, ptr %0, i64 16
  tail call void @des_key_setup(ptr noundef nonnull %9, ptr noundef nonnull %5, i32 noundef 0)
  br label %14

10:                                               ; preds = %3
  %11 = getelementptr inbounds i8, ptr %0, i64 16
  tail call void @des_key_setup(ptr noundef nonnull %11, ptr noundef %1, i32 noundef %2)
  %12 = getelementptr inbounds i8, ptr %0, i64 8
  %13 = getelementptr inbounds [16 x [6 x i8]], ptr %1, i64 1
  tail call void @des_key_setup(ptr noundef nonnull %12, ptr noundef nonnull %13, i32 noundef 0)
  tail call void @des_key_setup(ptr noundef %0, ptr noundef nonnull %5, i32 noundef %2)
  br label %14

14:                                               ; preds = %10, %6
  ret void
}

; Function Attrs: nofree nosync nounwind memory(argmem: readwrite) uwtable
define dso_local void @three_des_crypt(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef readonly %2) local_unnamed_addr #4 {
  tail call void @des_crypt(ptr noundef %0, ptr noundef %1, ptr noundef %2)
  %4 = getelementptr inbounds [16 x [6 x i8]], ptr %2, i64 1
  tail call void @des_crypt(ptr noundef %1, ptr noundef %1, ptr noundef nonnull %4)
  %5 = getelementptr inbounds [16 x [6 x i8]], ptr %2, i64 2
  tail call void @des_crypt(ptr noundef %1, ptr noundef %1, ptr noundef nonnull %5)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree nosync nounwind memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 2}
!2 = !{!"clang version 16.0.6 (Fedora 16.0.6-4.fc38)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"int", !4, i64 0}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.mustprogress"}
!10 = distinct !{!10, !9}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !9}
!13 = distinct !{!13, !9}
